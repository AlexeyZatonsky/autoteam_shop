from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp
import asyncio
from typing import Any, Dict

from ..settings.config import settings


class AutoteamBot:
    def __init__(self):
        self.bot = Bot(token=settings.TG_BOT_TOKEN)
        self.dp = Dispatcher()
        self.api_url = settings.API_URL
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        self.dp.message.register(self.start_handler, Command("start"))
        self.dp.callback_query.register(self.callback_handler)

    async def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in settings.admin_ids

    async def start_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not await self.is_admin(message.from_user.id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        builder = InlineKeyboardBuilder()
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="product:add")
        builder.button(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="product:delete")
        builder.button(text="–í—ã–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="product:list")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
        builder.button(text="–í—ã–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", callback_data="order:list")
        builder.button(text="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID", callback_data="order:get_by_id")
        builder.button(text="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ user_id", callback_data="order:get_by_user")
        builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data="order:change_status")
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        builder.button(text="–í—ã–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="category:list")
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="category:add")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥)
        builder.adjust(1)
        
        await message.answer(
            "–ê–¥–º–∏–Ω-–º–µ–Ω—é:",
            reply_markup=builder.as_markup()
        )

    async def callback_handler(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        if not await self.is_admin(callback.from_user.id):
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return

        action, operation = callback.data.split(":")
        
        if action == "product":
            if operation == "add":
                await callback.message.answer(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è, –û–ø–∏—Å–∞–Ω–∏–µ, –¶–µ–Ω–∞, –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID"
                )
            elif operation == "delete":
                await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            elif operation == "list":
                await self.handle_products_list(callback)
                
        elif action == "order":
            if operation == "list":
                await self.handle_orders_list(callback)
            elif operation == "get_by_id":
                await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∑–∞–∫–∞–∑–∞")
            elif operation == "get_by_user":
                await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            elif operation == "change_status":
                await callback.message.answer(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ID_–∑–∞–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 123 processing"
                )
                
        elif action == "category":
            if operation == "list":
                await self.handle_categories_list(callback)
            elif operation == "add":
                await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

        await callback.answer()

    async def handle_products_list(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        try:
            products = await self.make_request("GET", "/api/products/")
            text = "üì¶ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n\n"
            
            for product in products:
                text += f"‚Ä¢ {product['name']} - {product['price']}‚ÇΩ\n"
            
            await callback.message.answer(text)
        except Exception as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {str(e)}")

    async def handle_orders_list(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
        try:
            orders = await self.make_request("GET", "/api/orders/")
            text = "üì• –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n\n"
            
            for order in orders:
                text += (f"–ó–∞–∫–∞–∑ #{order['id']}\n"
                        f"–°—É–º–º–∞: {order['total_amount']}‚ÇΩ\n"
                        f"–°—Ç–∞—Ç—É—Å: {order['status']}\n\n")
            
            await callback.message.answer(text)
        except Exception as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")

    async def handle_categories_list(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        try:
            categories = await self.make_request("GET", "/api/categories/")
            text = "üìÅ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n"
            
            for category in categories:
                text += f"‚Ä¢ {category['name']} (ID: {category['id']})\n"
            
            await callback.message.answer(text)
        except Exception as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")

    async def make_request(self, method: str, endpoint: str, **kwargs) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API"""
        async with aiohttp.ClientSession() as session:
            url = f"{self.api_url}{endpoint}"
            async with session.request(method, url, **kwargs) as response:
                if response.status >= 400:
                    error_text = await response.text()
                    raise Exception(f"API error: {response.status} - {error_text}")
                return await response.json()

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.dp.start_polling(self.bot)


def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = AutoteamBot()
    asyncio.run(bot.start()) 