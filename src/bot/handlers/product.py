from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from ..states import ProductStates

router = Router(name="product")


@router.callback_query(F.data.startswith("product:"))
async def product_callback_handler(callback: types.CallbackQuery, state: FSMContext, api_client):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    operation = callback.data.split(":")[1]
    await handle_product_action(callback.message, operation, state, api_client.make_request)
    await callback.answer()


async def handle_product_action(message: types.Message, operation: str, state: FSMContext, make_request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"""
    if operation == "add":
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è, –û–ø–∏—Å–∞–Ω–∏–µ, –¶–µ–Ω–∞, –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID"
        )
    elif operation == "delete":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    elif operation == "list":
        await handle_products_list(message, make_request)


async def handle_products_list(message: types.Message, make_request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    try:
        products = await make_request("GET", "/api/products/")
        text = "üì¶ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n\n"
        
        for product in products:
            text += f"‚Ä¢ {product['name']} - {product['price']}‚ÇΩ\n"
        
        await message.answer(text)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {str(e)}") 