from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from src.bot.states.category import CategoryStates
from src.bot.keyboards.category import (
    get_category_management_menu,
    get_category_list_keyboard,
    get_category_creation_keyboard,
    get_category_created_keyboard,
    get_category_view_keyboard,
    get_category_delete_confirmation_keyboard,
    get_category_image_view_keyboard
)
import io

router = Router(name="category")


@router.callback_query(F.data.startswith("category:"))
async def category_callback_handler(callback: CallbackQuery, state: FSMContext, api_client):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        await callback.answer()
        _, action, *args = callback.data.split(":")
        
        handlers = {
            "manage": handle_manage,
            "list": handle_list,
            "add": handle_add,
            "cancel": handle_cancel,
            "view": handle_view,
            "view_image": handle_view_image,
            "edit_name": handle_edit_name,
            "edit_image": handle_edit_image,
            "confirm_delete": handle_confirm_delete,
            "delete": handle_delete
        }
        
        handler = handlers.get(action)
        if handler:
            await handler(callback.message, args, state, api_client.make_request)
        
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            _, action, *args = callback.data.split(":")
            handler = handlers.get(action)
            if handler:
                await handler(callback.message, args, state, api_client.make_request, new_message=True)
        else:
            raise


@router.message(CategoryStates.waiting_for_name)
async def category_name_handler(message: Message, state: FSMContext, api_client):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        name = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(name) < 2:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
            )
            return
            
        if len(name) > 50:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await state.update_data(category_name=name)
        await state.set_state(CategoryStates.waiting_for_image)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=get_category_creation_keyboard()
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(CategoryStates.waiting_for_image, F.photo)
async def category_image_handler(message: Message, state: FSMContext, api_client):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        data = await state.get_data()
        name = data['category_name']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo = message.photo[-1]
        file = await message.bot.get_file(photo.file_id)
        file_content = await message.bot.download_file(file.file_path)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        files = {
            'image': ('image.jpg', file_content, 'image/jpeg')
        }
        data = {'name': name}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        result = await api_client.make_request(
            method="POST",
            endpoint="api/categories",
            data=data,
            files=files
        )
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=get_category_created_keyboard()
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
        await state.clear()


@router.message(CategoryStates.waiting_for_new_name)
async def category_new_name_handler(message: Message, state: FSMContext, api_client):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        new_name = message.text.strip()
        data = await state.get_data()
        old_name = data['category_name']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(new_name) < 2 or len(new_name) > 50:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        result = await api_client.make_request(
            method="PATCH",
            endpoint=f"api/categories/{old_name}",
            json={"name": new_name}
        )
        
        await state.clear()
        await message.answer(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'!",
            reply_markup=get_category_view_keyboard(new_name)
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {str(e)}")
        await state.clear()


@router.message(CategoryStates.waiting_for_new_image, F.photo)
async def category_new_image_handler(message: Message, state: FSMContext, api_client):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        data = await state.get_data()
        category_name = data['category_name']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo = message.photo[-1]
        file = await message.bot.get_file(photo.file_id)
        file_content = await message.bot.download_file(file.file_path)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        files = {
            'image': ('image.jpg', file_content, 'image/jpeg')
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        result = await api_client.make_request(
            method="PATCH",
            endpoint=f"api/categories/{category_name}/image",
            files=files
        )
        
        await state.clear()
        await message.answer(
            "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=get_category_view_keyboard(category_name)
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        await state.clear()


async def handle_view_image(message: Message, args: list, state: FSMContext, make_request, new_message: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not args:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
        
    category_name = args[0]
    try:
        category = await make_request("GET", f"api/categories/{category_name}")
        
        if category.get('image'):
            keyboard = get_category_image_view_keyboard(category_name)
            await message.answer_photo(
                photo=category['image'],
                caption=f"üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}'",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                "–£ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                reply_markup=get_category_view_keyboard(category_name)
            )
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")


async def handle_edit_name(message: Message, args: list, state: FSMContext, make_request, new_message: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not args:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
        
    category_name = args[0]
    await state.set_state(CategoryStates.waiting_for_new_name)
    await state.update_data(category_name=category_name)
    
    text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    keyboard = get_category_creation_keyboard()
    
    if new_message:
        await message.answer(text, reply_markup=keyboard)
    else:
        await message.edit_text(text, reply_markup=keyboard)


async def handle_edit_image(message: Message, args: list, state: FSMContext, make_request, new_message: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not args:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
        
    category_name = args[0]
    await state.set_state(CategoryStates.waiting_for_new_image)
    await state.update_data(category_name=category_name)
    
    text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    keyboard = get_category_creation_keyboard()
    
    if new_message:
        await message.answer(text, reply_markup=keyboard)
    else:
        await message.edit_text(text, reply_markup=keyboard)


async def handle_manage(message: Message, args: list, state: FSMContext, make_request, new_message: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:"
    keyboard = get_category_management_menu()
    
    if new_message:
        await message.answer(text, reply_markup=keyboard)
    else:
        await message.edit_text(text, reply_markup=keyboard)


async def handle_list(message: Message, args: list, state: FSMContext, make_request, new_message: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        categories = await make_request(
            "GET", 
            "api/categories",
            headers={"Accept": "application/json"}
        )
        text = "üìÅ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n"
        text += "\n".join(f"‚Ä¢ {category['name']}" for category in categories)
        
        keyboard = get_category_list_keyboard(categories)
        
        if new_message:
            await message.answer(text, reply_markup=keyboard)
        else:
            await message.edit_text(text, reply_markup=keyboard)
            
    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}"
        await message.answer(error_text)


async def handle_add(message: Message, args: list, state: FSMContext, make_request, new_message: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.set_state(CategoryStates.waiting_for_name)
    text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    keyboard = get_category_creation_keyboard()
    
    if new_message:
        await message.answer(text, reply_markup=keyboard)
    else:
        await message.edit_text(text, reply_markup=keyboard)


async def handle_cancel(message: Message, args: list, state: FSMContext, make_request, new_message: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await handle_manage(message, args, state, make_request)


async def handle_view(message: Message, args: list, state: FSMContext, make_request, new_message: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not args:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
        
    category_name = args[0]
    try:
        category = await make_request("GET", f"api/categories/{category_name}")
        keyboard = get_category_view_keyboard(category_name)
        text = f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}"
        
        if new_message:
            await message.answer(text, reply_markup=keyboard)
        else:
            await message.edit_text(text, reply_markup=keyboard)
            
    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"
        await message.answer(error_text)


async def handle_confirm_delete(message: Message, args: list, state: FSMContext, make_request, new_message: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not args:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
        
    category_name = args[0]
    await state.update_data(category_to_delete=category_name)
    await state.set_state(CategoryStates.waiting_for_delete_confirmation)
    
    text = (f"‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")
    keyboard = get_category_delete_confirmation_keyboard(category_name)
    
    if new_message:
        await message.answer(text, reply_markup=keyboard)
    else:
        await message.edit_text(text, reply_markup=keyboard)


async def handle_delete(message: Message, args: list, state: FSMContext, make_request, new_message: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if not args:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        return
        
    category_name = args[0]
    try:
        await make_request("DELETE", f"api/categories/{category_name}")
        await state.clear()
        text = f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!"
        keyboard = get_category_management_menu()
        
        if new_message:
            await message.answer(text, reply_markup=keyboard)
        else:
            await message.edit_text(text, reply_markup=keyboard)
            
    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"
        await message.answer(error_text) 