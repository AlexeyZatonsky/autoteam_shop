from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from ..states import CategoryStates
from ..keyboards import (
    get_category_management_menu,
    get_category_list_keyboard,
    get_category_creation_keyboard,
    get_category_created_keyboard,
    get_category_view_keyboard,
    get_category_delete_confirmation_keyboard
)

router = Router(name="category")


@router.callback_query(F.data.startswith("category:"))
async def category_callback_handler(callback: types.CallbackQuery, state: FSMContext, api_client):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    operation = callback.data.split(":")[1]
    args = callback.data.split(":")[2:] if len(callback.data.split(":")) > 2 else []
    
    await handle_category_action(callback.message, operation, args, state, api_client.make_request)
    await callback.answer()


@router.message(CategoryStates.waiting_for_name)
async def category_name_handler(message: types.Message, state: FSMContext, api_client):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await process_category_name(message, state, api_client.make_request)


async def handle_category_action(message: types.Message, operation: str, args: list, state: FSMContext, make_request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    if operation == "manage":
        await message.edit_text(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:",
            reply_markup=get_category_management_menu()
        )
        
    elif operation == "list":
        categories = await make_request("GET", "/api/categories")
        text = "üìÅ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n"
        
        for category in categories:
            text += f"‚Ä¢ {category['name']}\n"
        
        await message.edit_text(
            text,
            reply_markup=get_category_list_keyboard(categories)
        )
        
    elif operation == "add":
        await state.set_state(CategoryStates.waiting_for_name)
        await message.edit_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=get_category_creation_keyboard()
        )
        
    elif operation == "cancel":
        await state.clear()
        await handle_category_action(message, "manage", [], state, make_request)

    elif operation == "view":
        if not args:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return
            
        category_name = args[0]
        try:
            category = await make_request("GET", f"/api/categories/{category_name}")
            await message.edit_text(
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']}",
                reply_markup=get_category_view_keyboard(category_name)
            )
        except Exception as e:
            await message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"
            )

    elif operation == "confirm_delete":
        if not args:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return
            
        category_name = args[0]
        await state.update_data(category_to_delete=category_name)
        await state.set_state(CategoryStates.waiting_for_delete_confirmation)
        
        await message.edit_text(
            f"‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=get_category_delete_confirmation_keyboard(category_name)
        )
        
    elif operation == "delete":
        if not args:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return
            
        category_name = args[0]
        try:
            await make_request("DELETE", f"/api/categories/{category_name}")
            await state.clear()
            await message.edit_text(
                f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
                reply_markup=get_category_management_menu()
            )
        except Exception as e:
            await message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"
            )


async def process_category_name(message: types.Message, state: FSMContext, make_request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category_data = {
            "name": message.text
        }
        await make_request("POST", "/api/categories", json=category_data)
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{message.text}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=get_category_created_keyboard()
        )
        
    except Exception as e:
        error_msg = str(e)
        if "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in error_msg:
            await message.answer(
                f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{message.text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
            )
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {error_msg}") 