from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from ..states import OrderStates

router = Router(name="order")


@router.callback_query(F.data.startswith("order:"))
async def order_callback_handler(callback: types.CallbackQuery, state: FSMContext, api_client):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤"""
    operation = callback.data.split(":")[1]
    await handle_order_action(callback.message, operation, state, api_client.make_request)
    await callback.answer()


async def handle_order_action(message: types.Message, operation: str, state: FSMContext, make_request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    if operation == "list":
        await handle_orders_list(message, make_request)
    elif operation == "get_by_id":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∑–∞–∫–∞–∑–∞")
    elif operation == "get_by_user":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    elif operation == "change_status":
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ID_–∑–∞–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 123 processing"
        )


async def handle_orders_list(message: types.Message, make_request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
    try:
        orders = await make_request("GET", "/api/orders/")
        text = "üì• –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n\n"
        
        for order in orders:
            text += (f"–ó–∞–∫–∞–∑ #{order['id']}\n"
                    f"–°—É–º–º–∞: {order['total_amount']}‚ÇΩ\n"
                    f"–°—Ç–∞—Ç—É—Å: {order['status']}\n\n")
        
        await message.answer(text)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤: {str(e)}") 