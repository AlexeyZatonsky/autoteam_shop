from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from datetime import datetime, date, timedelta
import uuid

from ..api.order_api import OrderAPI
from ..keyboards.order import (
    get_order_management_menu,
    get_order_list_keyboard,
    get_order_view_keyboard,
    get_order_status_keyboard,
    get_payment_status_keyboard,
    get_order_cancel_confirmation_keyboard,
    get_order_delete_confirmation_keyboard,
    get_delete_completed_confirmation_keyboard
)
from ..states.order import OrderStates
from ...orders.enums import OrderStatusEnum, PaymentStatusEnum


router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤

@router.callback_query(F.data == "order:manage")
async def order_management(callback: CallbackQuery, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
    keyboard = get_order_management_menu()
    await callback.message.edit_text(
        "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "order:all")
async def get_all_orders(callback: CallbackQuery, **data):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    api_client = data["api_client"].order_api
    
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤...")
    
    try:
        orders = await api_client.get_all_orders()
        if not orders:
            await callback.message.edit_text(
                "üìã –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_order_management_menu()
            )
            return
        
        keyboard = get_order_list_keyboard(orders)
        await callback.message.edit_text(
            "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n"
            "–§–æ—Ä–º–∞—Ç: üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | üíµ –°—É–º–º–∞ | üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ | üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã",
            reply_markup=keyboard
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}",
            reply_markup=get_order_management_menu()
        )


@router.callback_query(F.data == "order:today")
async def get_today_orders(callback: CallbackQuery, **data):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    api_client = data["api_client"].order_api
    
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")
    
    try:
        orders = await api_client.get_today_orders()
        if not orders:
            await callback.message.edit_text(
                "üìã –ó–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_order_management_menu()
            )
            return
        
        keyboard = get_order_list_keyboard(orders)
        await callback.message.edit_text(
            "üìã –ó–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            "–§–æ—Ä–º–∞—Ç: üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | üíµ –°—É–º–º–∞ | üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ | üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã",
            reply_markup=keyboard
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}",
            reply_markup=get_order_management_menu()
        )


@router.callback_query(F.data == "order:week")
async def get_week_orders(callback: CallbackQuery, **data):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    api_client = data["api_client"].order_api
    
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é...")
    
    try:
        orders = await api_client.get_week_orders()
        if not orders:
            await callback.message.edit_text(
                "üìã –ó–∞–∫–∞–∑—ã –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_order_management_menu()
            )
            return
        
        keyboard = get_order_list_keyboard(orders)
        await callback.message.edit_text(
            "üìã –ó–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n\n"
            "–§–æ—Ä–º–∞—Ç: üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | üíµ –°—É–º–º–∞ | üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ | üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã",
            reply_markup=keyboard
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}",
            reply_markup=get_order_management_menu()
        )


@router.callback_query(F.data == "order:completed")
async def get_completed_orders(callback: CallbackQuery, **data):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    api_client = data["api_client"].order_api
    
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
    
    try:
        orders = await api_client.get_completed_orders()
        if not orders:
            await callback.message.edit_text(
                "üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_order_management_menu()
            )
            return
        
        keyboard = get_order_list_keyboard(orders)
        await callback.message.edit_text(
            "üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
            "–§–æ—Ä–º–∞—Ç: üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | üíµ –°—É–º–º–∞ | üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ | üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã",
            reply_markup=keyboard
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}",
            reply_markup=get_order_management_menu()
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤

@router.callback_query(F.data == "order:search_by_id")
async def search_by_id_start(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ ID"""
    await state.set_state(OrderStates.waiting_for_order_id)
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞:",
        reply_markup=None
    )
    await callback.answer()


@router.message(OrderStates.waiting_for_order_id)
async def search_by_id_process(message: Message, state: FSMContext, **data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∑–∞–∫–∞–∑–∞"""
    api_client = data["api_client"].order_api
    order_id = message.text.strip()
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ UUID
        order_id_uuid = uuid.UUID(order_id)
        order = await api_client.get_order(order_id_uuid)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        order_text = format_order_details(order)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        keyboard = get_order_view_keyboard(order_id)
        await message.answer(
            order_text,
            reply_markup=keyboard
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID.",
            reply_markup=get_order_management_menu()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}",
            reply_markup=get_order_management_menu()
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.callback_query(F.data == "order:search_by_username")
async def search_by_username_start(callback: CallbackQuery, state: FSMContext, **kwargs):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.set_state(OrderStates.waiting_for_username)
    await callback.message.edit_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–±–µ–∑ @):",
        reply_markup=None
    )
    await callback.answer()


@router.message(OrderStates.waiting_for_username)
async def search_by_username_process(message: Message, state: FSMContext, **data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    api_client = data["api_client"].order_api
    username = message.text.strip()
    
    if username.startswith('@'):
        username = username[1:]
    
    try:
        orders = await api_client.get_orders_by_username(username)
        
        if not orders:
            await message.answer(
                f"üìã –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_order_management_menu()
            )
        else:
            keyboard = get_order_list_keyboard(orders)
            await message.answer(
                f"üìã –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:\n\n"
                f"–§–æ—Ä–º–∞—Ç: üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | üíµ –°—É–º–º–∞ | üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ | üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã",
                reply_markup=keyboard
            )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤: {str(e)}",
            reply_markup=get_order_management_menu()
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º

@router.callback_query(F.data.startswith("order:view:"))
async def view_order(callback: CallbackQuery, **data):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
    api_client = data["api_client"].order_api
    order_id = callback.data.split(":")[2]
    
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ...")
    
    try:
        order = await api_client.get_order(order_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        order_text = format_order_details(order)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        keyboard = get_order_view_keyboard(order_id)
        await callback.message.edit_text(
            order_text,
            reply_markup=keyboard
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ: {str(e)}",
            reply_markup=get_order_management_menu()
        )


@router.callback_query(F.data.startswith("order:change_status:"))
async def change_status_start(callback: CallbackQuery, **kwargs):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    order_id = callback.data.split(":")[2]
    
    keyboard = get_order_status_keyboard(order_id)
    await callback.message.edit_text(
        "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:",
        reply_markup=keyboard
    )
    await callback.answer()


async def get_full_order_id(api_client, short_order_id: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π UUID –∑–∞–∫–∞–∑–∞ –ø–æ –µ–≥–æ –∫–æ—Ä–æ—Ç–∫–æ–π –≤–µ—Ä—Å–∏–∏"""
    orders = await api_client.get_all_orders()
    for order in orders:
        if order["id"].startswith(short_order_id):
            return order["id"]
    raise ValueError(f"–ó–∞–∫–∞–∑ —Å ID {short_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

@router.callback_query(F.data.startswith("order:set_status:"))
async def set_status(callback: CallbackQuery, **data):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    api_client = data["api_client"].order_api
    parts = callback.data.split(":")
    short_order_id = parts[2]
    status_name = parts[3]
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏
    status_value = OrderStatusEnum[status_name].value
    
    await callback.answer(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ {status_value}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π UUID –∑–∞–∫–∞–∑–∞
        full_order_id = await get_full_order_id(api_client, short_order_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è, –∞ –Ω–µ –µ–≥–æ –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–ª–Ω—ã–π ID
        await api_client.update_order_status(full_order_id, status_value)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = await api_client.get_order(full_order_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        order_text = format_order_details(order)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        keyboard = get_order_view_keyboard(full_order_id)
        await callback.message.edit_text(
            f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status_value}\n\n{order_text}",
            reply_markup=keyboard
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {str(e)}",
            reply_markup=get_order_view_keyboard(short_order_id)
        )


@router.callback_query(F.data.startswith("order:change_payment:"))
async def change_payment_start(callback: CallbackQuery, **kwargs):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞"""
    order_id = callback.data.split(":")[2]
    
    keyboard = get_payment_status_keyboard(order_id)
    await callback.message.edit_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("order:set_payment:"))
async def set_payment(callback: CallbackQuery, **data):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞"""
    api_client = data["api_client"].order_api
    parts = callback.data.split(":")
    short_order_id = parts[2]
    payment_status_name = parts[3]
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏
    payment_status_value = PaymentStatusEnum[payment_status_name].value
    
    await callback.answer(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞ {payment_status_value}...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π UUID –∑–∞–∫–∞–∑–∞
        full_order_id = await get_full_order_id(api_client, short_order_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è, –∞ –Ω–µ –µ–≥–æ –∏–º—è
        await api_client.update_payment_status(full_order_id, payment_status_value)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = await api_client.get_order(full_order_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        order_text = format_order_details(order)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        keyboard = get_order_view_keyboard(full_order_id)
        await callback.message.edit_text(
            f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {payment_status_value}\n\n{order_text}",
            reply_markup=keyboard
        )
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã: {str(e)}",
            reply_markup=get_order_management_menu()
        )


@router.callback_query(F.data.startswith("order:confirm_cancel:"))
async def confirm_cancel_order(callback: CallbackQuery, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
    order_id = callback.data.split(":")[2]
    
    keyboard = get_order_cancel_confirmation_keyboard(order_id)
    await callback.message.edit_text(
        "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–∏—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ '–û—Ç–º–µ–Ω—ë–Ω'.",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("order:cancel:"))
async def cancel_order(callback: CallbackQuery, **data):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
    api_client = data["api_client"].order_api
    short_order_id = callback.data.split(":")[2]
    
    await callback.answer("–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π UUID –∑–∞–∫–∞–∑–∞
        full_order_id = await get_full_order_id(api_client, short_order_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å CANCELLED
        await api_client.update_order_status(full_order_id, "CANCELLED")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = await api_client.get_order(full_order_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        order_text = format_order_details(order)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        keyboard = get_order_view_keyboard(full_order_id)
        await callback.message.edit_text(
            f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω\n\n{order_text}",
            reply_markup=keyboard
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: {str(e)}",
            reply_markup=get_order_view_keyboard(short_order_id)
        )


@router.callback_query(F.data.startswith("order:confirm_delete:"))
async def confirm_delete_order(callback: CallbackQuery, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    order_id = callback.data.split(":")[2]
    
    keyboard = get_order_delete_confirmation_keyboard(order_id)
    await callback.message.edit_text(
        "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("order:delete:"))
async def delete_order(callback: CallbackQuery, **data):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    api_client = data["api_client"].order_api
    short_order_id = callback.data.split(":")[2]
    
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π UUID –∑–∞–∫–∞–∑–∞
        full_order_id = await get_full_order_id(api_client, short_order_id)
        
        await api_client.delete_order(full_order_id)
        
        await callback.message.edit_text(
            "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            reply_markup=get_order_management_menu()
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}",
            reply_markup=get_order_management_menu()
        )


@router.callback_query(F.data == "order:delete_completed")
async def confirm_delete_completed(callback: CallbackQuery, **kwargs):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    keyboard = get_delete_completed_confirmation_keyboard()
    await callback.message.edit_text(
        "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "order:delete_completed_confirm")
async def delete_completed_orders(callback: CallbackQuery, **data):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    api_client = data["api_client"].order_api
    
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
    
    try:
        result = await api_client.delete_completed_orders()
        count = result.get("count", 0)
        
        await callback.message.edit_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {count} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
            reply_markup=get_order_management_menu()
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {str(e)}",
            reply_markup=get_order_management_menu()
        )


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def format_order_details(order: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    order_id = order.get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    status = order.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ").upper() if order.get("status") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    payment_status = order.get("payment_status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ").upper() if order.get("payment_status") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    payment_method = order.get("payment_method", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ").upper() if order.get("payment_method") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    total_amount = order.get("total_amount", "0")
    created_at = order.get("created_at", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    delivery_method = order.get("delivery_method", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ").upper() if order.get("delivery_method") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    phone_number = order.get("phone_number", "–ù–µ —É–∫–∞–∑–∞–Ω")
    delivery_address = order.get("delivery_address", "–ù–µ —É–∫–∞–∑–∞–Ω")
    telegram_username = order.get("telegram_username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    full_name = order.get("full_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
    if isinstance(created_at, str):
        try:
            dt = datetime.fromisoformat(created_at.replace("Z", "+00:00"))
            created_at = dt.strftime("%d.%m.%Y %H:%M")
        except:
            pass
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    items = order.get("items", [])
    items_text = ""
    for i, item in enumerate(items, 1):
        product_name = item.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        quantity = item.get("quantity", 0)
        price = item.get("price", 0)
        items_text += f"{i}. {product_name} x {quantity} = {float(price) * quantity}‚ÇΩ\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"üõç –ó–∞–∫–∞–∑ #{order_id[:8]}\n\n"
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{telegram_username}\n"
        f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {full_name}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
        f"üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}\n"
        f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
        f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
        f"üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: {payment_status}\n"
        f"üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {status}\n"
        f"üíµ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_amount}‚ÇΩ\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n{items_text}"
    )
    
    return text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

@router.callback_query(F.data.startswith("order:page:"))
async def handle_pagination(callback: CallbackQuery, **data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
    api_client = data["api_client"].order_api
    page = int(callback.data.split(":")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    # –∏–ª–∏ –¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
    
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
    try:
        orders = await api_client.get_all_orders(skip=page * 5, limit=5)
        
        if not orders:
            await callback.message.edit_text(
                "üìã –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ",
                reply_markup=get_order_management_menu()
            )
            return
        
        keyboard = get_order_list_keyboard(orders, page=page)
        await callback.message.edit_text(
            "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n\n"
            "–§–æ—Ä–º–∞—Ç: üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å | üíµ –°—É–º–º–∞ | üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ | üí∞ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã",
            reply_markup=keyboard
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}",
            reply_markup=get_order_management_menu()
        )
    
    await callback.answer()


@router.callback_query(F.data == "order:refresh")
async def refresh_orders(callback: CallbackQuery, **data):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    await get_all_orders(callback, **data)


@router.callback_query(F.data == "order:back_to_list")
async def back_to_list(callback: CallbackQuery, **data):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    await get_all_orders(callback, **data)


@router.callback_query(F.data == "order:noop")
async def noop(callback: CallbackQuery, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.answer()


@router.callback_query(F.data.startswith("order:user_info:"))
async def user_info(callback: CallbackQuery, **data):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, —Å–¥–µ–ª–∞–≤—à–µ–º –∑–∞–∫–∞–∑"""
    api_client = data["api_client"].order_api
    order_id = callback.data.split(":")[2]
    
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = await api_client.get_order(order_id)
        
        if not order:
            await callback.message.edit_text(
                "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_order_management_menu()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∑–∞–∫–∞–∑–∞
        username = order.get("telegram_username")
        user_id = order.get("user_id")
        
        if not username and not user_id:
            await callback.message.edit_text(
                "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–∫–∞–∑–µ",
                reply_markup=get_order_view_keyboard(order_id)
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –∑–∞–∫–∞–∑–∞
        user_text = format_basic_user_info(order)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try:
            if username:
                user_info = await api_client.get_user_info(username)
                if user_info:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_text = format_user_info(user_info, order)
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é
            user_text += f"\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {str(e)}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await callback.message.edit_text(
            f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n{user_text}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîô –ö –∑–∞–∫–∞–∑—É", 
                        callback_data=f"order:view:{order_id}"
                    )
                ]
            ])
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {str(e)}",
            reply_markup=get_order_management_menu()
        )


def format_user_info(user_info: dict, order: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    username = user_info.get("tg_name", order.get("telegram_username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
    tg_first_name = user_info.get("first_name", "")
    tg_last_name = user_info.get("last_name", "")
    tg_full_name = f"{tg_first_name} {tg_last_name}".strip() or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    recipient_name = order.get("full_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    email = user_info.get("email", "–ù–µ —É–∫–∞–∑–∞–Ω")
    phone = order.get("phone_number", "–ù–µ —É–∫–∞–∑–∞–Ω")
    address = order.get("delivery_address", "–ù–µ —É–∫–∞–∑–∞–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
    orders_count = user_info.get("orders_count", 0)
    total_spent = user_info.get("total_spent", 0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
        f"üìù –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram: {tg_full_name}\n"
        f"üìù –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {recipient_name}\n"
        f"üìß Email: {email}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {orders_count}\n"
        f"- –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_spent}‚ÇΩ\n"
    )
    
    return text


def format_basic_user_info(order: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –∑–∞–∫–∞–∑–∞"""
    username = order.get("telegram_username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    user_id = order.get("user_id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    recipient_name = order.get("full_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    phone = order.get("phone_number", "–ù–µ —É–∫–∞–∑–∞–Ω")
    address = order.get("delivery_address", "–ù–µ —É–∫–∞–∑–∞–Ω")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
        f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
        f"üìù –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {recipient_name}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n"
    )
    
    return text 