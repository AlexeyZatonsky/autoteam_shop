from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from ..states.product import ProductStates
from ..keyboards.product import get_product_list_keyboard, get_product_creation_keyboard
from ..api import ProductAPI

router = Router(name="product_list")


@router.callback_query(F.data == "product:list")
async def handle_products_list(callback: CallbackQuery, api_client):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å API
        products = await ProductAPI(api_client).get_products()
        
        if not products or not products.get('items') or len(products['items']) == 0:
            # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
            await callback.message.answer(
                "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç.",
                reply_markup=get_product_creation_keyboard()
            )
        else:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            await callback.message.answer(
                f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {products['total']}",
                reply_markup=get_product_list_keyboard(products['items'])
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {str(e)}")
        await callback.message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {str(e)}",
            reply_markup=get_product_creation_keyboard()
        )
    
    await callback.answer()


@router.message(Command("find_product"))
async def find_product_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    await state.set_state(ProductStates.waiting_for_search)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –µ–≥–æ ID –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )


@router.message(StateFilter(ProductStates.waiting_for_search))
async def process_product_search(message: Message, state: FSMContext, api_client):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ ID"""
    search_query = message.text.strip()
    
    if not search_query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ –µ–≥–æ ID.")
        return
    
    try:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å UUID
            import uuid
            product_id = uuid.UUID(search_query)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
            product = await ProductAPI(api_client).get_product(product_id)
            
            if product:
                # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
                callback = types.CallbackQuery(
                    id="0",
                    from_user=message.from_user,
                    chat_instance="0",
                    message=message,
                    data=f"product:view:{product_id}"
                )
                from .product_view import handle_product_view
                await handle_product_view(callback, api_client, state)
                await state.clear()
                return
        except (ValueError, uuid.UUID.error, AttributeError):
            # –ï—Å–ª–∏ –Ω–µ UUID, –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            pass
        
        # –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        products = await ProductAPI(api_client).get_products(search_query=search_query)
        
        if products and products.get('items') and len(products['items']) > 0:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
            keyboard = []
            for product in products['items']:
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"{product['name']} - {product['price']} —Ä—É–±.", 
                        callback_data=f"product:view:{product['id']}"
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
            keyboard.append([
                InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="product:list")
            ])
            
            await message.answer(
                f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products['items'])}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
        else:
            await message.answer(
                "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="product:list")]
                ])
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}")
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="product:list")]
            ])
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear() 