from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from ..states.product import ProductStates
from ..keyboards.product import get_product_view_keyboard
from ..api import ProductAPI
from ..services import BotFileService
import re
import io
from src.aws import s3_client

router = Router(name="product_view")


def fix_image_url(url: str) -> str:
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —É–¥–∞–ª—è—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–µ—Ñ–∏–∫—Å—ã"""
    if not url:
        return url
    
    # –ï—Å–ª–∏ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://
    if url.startswith(('http://', 'https://')):
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ 'products/products/'
        pattern = r'(.*?products/)(products/.+)'
        match = re.search(pattern, url)
        if match:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å URL –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø—É—Ç–∏
            base_url = match.group(1)
            relative_path = match.group(2)
            return f"{base_url}{relative_path}"
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω, –Ω–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ http://
        if url.count('http://') > 1 or url.count('https://') > 1:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π http:// –∏–ª–∏ https://
            last_http = url.rfind('http://')
            last_https = url.rfind('https://')
            last_protocol = max(last_http, last_https)
            if last_protocol > 0:
                return url[last_protocol:]
    
    return url


def extract_object_name(url: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –æ–±—ä–µ–∫—Ç–∞ –∏–∑ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è S3"""
    if not url:
        return None
    
    # –ï—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç 'products/'
    if 'products/' in url:
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ 'products/'
        parts = url.split('products/')
        if len(parts) > 1:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø–æ—Å–ª–µ 'products/'
            filename = parts[-1]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ filename –µ—â–µ –æ–¥–∏–Ω –ø—É—Ç—å
            if '/' in filename:
                # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
                filename = filename.split('/')[-1]
            return f"products/{filename}"
    
    return None


@router.callback_query(F.data.startswith("product:view:"))
async def handle_product_view(callback: CallbackQuery, api_client, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞"""
    parts = callback.data.split(":")
    product_id = parts[2]
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å API
        product = await ProductAPI(api_client).get_product(product_id)
        
        if not product:
            await callback.message.answer(
                "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="product:list")]
                ])
            )
            return
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if product.get('images'):
            product['images'] = [fix_image_url(img) for img in product['images']]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        has_images = product.get('images') and len(product['images']) > 0
        total_images = len(product['images']) if has_images else 0
        
        text = f"üì¶ *{product['name']}*"
        if has_images:
            text += f" (–§–æ—Ç–æ 1/{total_images})"
        text += "\n\n"
        
        if product.get('description'):
            text += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {product['description']}\n\n"
        text += f"üí∞ *–¶–µ–Ω–∞:* {product['price']} —Ä—É–±.\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if product.get('categories'):
            categories = [cat['name'] for cat in product['categories']]
            text += f"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(categories)}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        keyboard = get_product_view_keyboard(product_id)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        if has_images:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–∑ URL
                image_url = product['images'][0]
                object_name = extract_object_name(image_url)
                
                print(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∏–º—è –æ–±—ä–µ–∫—Ç–∞: {object_name}")
                
                if object_name:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3
                    image_data = await s3_client.get_file(object_name)
                    
                    if image_data:
                        # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
                        photo = io.BytesIO(image_data)
                        photo.name = object_name.split('/')[-1]
                        
                        try:
                            # –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ BytesIO
                            from aiogram.types import FSInputFile
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            temp_filename = f"temp_{photo.name}"
                            with open(temp_filename, "wb") as f:
                                f.write(image_data)
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ FSInputFile
                            await callback.message.answer_photo(
                                photo=FSInputFile(temp_filename),
                                caption=text,
                                reply_markup=keyboard,
                                parse_mode="Markdown"
                            )
                            
                            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            import os
                            os.remove(temp_filename)
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ FSInputFile: {str(e)}")
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                            await callback.message.answer(
                                text + f"\n\n‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}*",
                                reply_markup=keyboard,
                                parse_mode="Markdown"
                            )
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                        await callback.message.answer(
                            text + "\n\n‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞*",
                            reply_markup=keyboard,
                            parse_mode="Markdown"
                        )
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –æ–±—ä–µ–∫—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    await callback.message.answer(
                        text + "\n\n‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é*",
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                await callback.message.answer(
                    text + f"\n\n‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}*",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await callback.message.answer(
                text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}")
        await callback.message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="product:list")]
            ])
        )


@router.callback_query(F.data.startswith("product:next_image:") | F.data.startswith("product:prev_image:"))
async def handle_product_image_navigation(callback: CallbackQuery, api_client, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –ø—Ä–æ–¥—É–∫—Ç–∞"""
    parts = callback.data.split(":")
    action = parts[1]
    product_id = parts[2]
    current_index = int(parts[3])
    next_image = action == "next_image"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å API
        product = await ProductAPI(api_client).get_product(product_id)
        
        if not product or not product.get('images') or len(product['images']) == 0:
            await callback.message.answer(
                "–£ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.",
                reply_markup=get_product_view_keyboard(product_id),
                parse_mode="Markdown"
            )
            return
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        product['images'] = [fix_image_url(img) for img in product['images']]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = product['images']
        total_images = len(images)
        
        if next_image:
            new_index = (current_index + 1) % total_images
        else:
            new_index = (current_index - 1) % total_images
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        text = f"üì¶ *{product['name']}* (–§–æ—Ç–æ {new_index + 1}/{total_images})\n\n"
        if product.get('description'):
            text += f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {product['description']}\n\n"
        text += f"üí∞ *–¶–µ–Ω–∞:* {product['price']} —Ä—É–±.\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if product.get('categories'):
            categories = [cat['name'] for cat in product['categories']]
            text += f"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* {', '.join(categories)}\n"
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚óÄÔ∏è –ü—Ä–µ–¥. —Ñ–æ—Ç–æ", 
                        callback_data=f"product:prev_image:{product_id}:{new_index}"
                    ),
                    InlineKeyboardButton(
                        text="–°–ª–µ–¥. —Ñ–æ—Ç–æ ‚ñ∂Ô∏è", 
                        callback_data=f"product:next_image:{product_id}:{new_index}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", 
                        callback_data=f"product:edit_name:{product_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", 
                        callback_data=f"product:edit_description:{product_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", 
                        callback_data=f"product:edit_price:{product_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", 
                        callback_data=f"product:edit_categories:{product_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –£–¥–∞–ª–∏—Ç—å", 
                        callback_data=f"product:confirm_delete:{product_id}"
                    )
                ],
                [
                    InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="product:list")
                ]
            ]
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–∑ URL
            image_url = images[new_index]
            object_name = extract_object_name(image_url)
            
            print(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∏–º—è –æ–±—ä–µ–∫—Ç–∞: {object_name}")
            
            if object_name:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ S3
                image_data = await s3_client.get_file(object_name)
                
                if image_data:
                    # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
                    photo = io.BytesIO(image_data)
                    photo.name = object_name.split('/')[-1]
                    
                    try:
                        # –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ BytesIO
                        from aiogram.types import FSInputFile
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        temp_filename = f"temp_{photo.name}"
                        with open(temp_filename, "wb") as f:
                            f.write(image_data)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ FSInputFile
                        await callback.message.answer_photo(
                            photo=FSInputFile(temp_filename),
                            caption=text,
                            reply_markup=keyboard,
                            parse_mode="Markdown"
                        )
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        import os
                        os.remove(temp_filename)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ FSInputFile: {str(e)}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                        await callback.message.answer(
                            text + f"\n\n‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}*",
                            reply_markup=keyboard,
                            parse_mode="Markdown"
                        )
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    await callback.message.answer(
                        text + "\n\n‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞*",
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –æ–±—ä–µ–∫—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                await callback.message.answer(
                    text + "\n\n‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é*",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await callback.message.answer(
                text + f"\n\n‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}*",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º: {str(e)}")
        await callback.message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤", callback_data="product:list")]
            ])
        ) 